left_join(tax),
aes(x=0, xend=PC1, y=0, yend=PC2),
arrow = arrow(length = unit(0.3,"cm")))
bigplot
ggplot() +
theme(panel.background = element_rect(fill = "gray90"),
plot.background = element_rect(fill = "gray90"),
legend.position = "top") +
geom_segment(data=wu_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>%
top_n(8, a) %>%
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>%
left_join(tax),
aes(x=0, xend=PC1, y=0, yend=PC2, color=Order),
size=2,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_label_repel(data=wu_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>%
top_n(8, a) %>%
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>%
select(FeatureID, PC1, PC2) %>%
left_join(tax),
aes(x=PC1, y=PC2, fill=Order, label=ASValias), force=5,
segment.alpha = 0.1, color="black", size=5) +
scale_fill_manual(values = c('#9A6600', '#9BCC94', '#405E00')) + ## to match other barplots!
scale_color_manual(values = c('#9A6600', '#9BCC94', '#405E00')) +
labs(x="", y="")
ggplot() +
geom_text(data=dc_fullplotdata, aes(x=PC1, y=PC2, label=Site, color=Window), size=2.5) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.position = "top",
legend.key.width = unit(3.5, "cm")) +
xlab(paste(paste("PC1", round(100*dc_biplot.qza$data$ProportionExplained[1],2),"%"))) +
ylab(paste(paste("PC2", round(100*dc_biplot.qza$data$ProportionExplained[2],2),"%"))) +
geom_segment(data=dc_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>% # calculate the distance from the origin
top_n(8, a) %>% #keep 8 furthest away points
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>% # scale arrows linearly... is this ok?
left_join(tax),
aes(x=0, xend=PC1, y=0, yend=PC2),
arrow = arrow(length = unit(0.3,"cm")))
## save as 'biplot_dc_select2016'; export at 900x900
dc_bigplot <- ggplot() +
geom_text(data=dc_fullplotdata, aes(x=PC1, y=PC2, label=Site, color=Window), size=2.5) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.position = "top",
legend.key.width = unit(3.5, "cm")) +
xlab(paste(paste("PC1", round(100*dc_biplot.qza$data$ProportionExplained[1],2),"%"))) +
ylab(paste(paste("PC2", round(100*dc_biplot.qza$data$ProportionExplained[2],2),"%"))) +
geom_segment(data=dc_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>% # calculate the distance from the origin
top_n(8, a) %>% #keep 8 furthest away points
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>% # scale arrows linearly... is this ok?
left_join(tax),
aes(x=0, xend=PC1, y=0, yend=PC2),
arrow = arrow(length = unit(0.3,"cm")))
ggplot() +
theme(panel.background = element_rect(fill = "gray90"),
plot.background = element_rect(fill = "gray90"),
legend.position = "top") +
geom_segment(data=dc_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>%
top_n(8, a) %>%
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>%
left_join(tax),
aes(x=0, xend=PC1, y=0, yend=PC2, color=Order),
size=2,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_label_repel(data=dc_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>%
top_n(8, a) %>%
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>%
select(FeatureID, PC1, PC2) %>%
left_join(tax),
aes(x=PC1, y=PC2, fill=Order, label=ASValias), force=5,
segment.alpha = 0.1, color="black", size=5) +
scale_fill_manual(values = c('#9A6600', '#9BCC94', '#405E00')) + ## to match other barplots!
scale_color_manual(values = c('#9A6600', '#9BCC94', '#405E00')) +
labs(x="", y="")
## read in data
dcmin10_biplot_url <- "/Users/do/Repos/nhguano/data/qiime_qza/biplots/deicode_biplot_min10feat.qza"
rm(baseplot, bigplot)
rm(wu_biplot_url, wu_biplot.qza, wu_fullplotdata)
dcmin10_biplot.qza <- read_qza(dcmin10_biplot_url)
## create data frame for species plot
dcmin10_fullplotdata <- dcmin10_biplot.qza$data$Vectors %>% left_join(study1meta)
View(dcmin10_fullplotdata)
ggplot() +
geom_text(data=dcmin10_fullplotdata, aes(x=PC1, y=PC2, label=Site, color=Window), size=2.5) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.position = "top",
legend.key.width = unit(3.5, "cm")) +
xlab(paste(paste("PC1", round(100*dcmin10_biplot.qza$data$ProportionExplained[1],2),"%"))) +
ylab(paste(paste("PC2", round(100*dcmin10_biplot.qza$data$ProportionExplained[2],2),"%"))) +
geom_segment(data=dcmin10_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>% # calculate the distance from the origin
top_n(8, a) %>% #keep 8 furthest away points
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>% # scale arrows linearly... is this ok?
left_join(tax),
aes(x=0, xend=PC1, y=0, yend=PC2),
arrow = arrow(length = unit(0.3,"cm")))
ggplot() +
theme(panel.background = element_rect(fill = "gray90"),
plot.background = element_rect(fill = "gray90"),
legend.position = "top") +
geom_segment(data=dcmin10_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>%
top_n(8, a) %>%
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>%
left_join(tax),
aes(x=0, xend=PC1, y=0, yend=PC2, color=Order),
size=2,
arrow = arrow(length = unit(0.3,"cm"))) +
geom_label_repel(data=dcmin10_biplot.qza$data$Species %>%
mutate(a=sqrt(PC1^2+PC2^2)) %>%
top_n(8, a) %>%
mutate(PC1=PC1*0.3, PC2=PC2*0.3) %>%
select(FeatureID, PC1, PC2) %>%
left_join(tax),
aes(x=PC1, y=PC2, fill=Order, label=ASValias), force=5,
segment.alpha = 0.1, color="black", size=5) +
scale_fill_manual(values = c('#9A6600', '#9BCC94', '#405E00')) + ## to match other barplots!
scale_color_manual(values = c('#9A6600', '#9BCC94', '#405E00')) +
labs(x="", y="")
## import read data (importing just the read-filtered, min-sample data)
read_dat = read_csv("https://github.com/devonorourke/nhguano/raw/master/data/filtered_dataset_wWindows_min1000Reads_min2SamplesperSiteWindow.csv")
## import alpha diversity values from QIIME .qza artifacts
alphaimport <- function(urlpath, alphametric){
tmp.qza <- read_qza(urlpath)
tmp.dat <- tmp.qza$data %>% mutate(SampleID=row.names(.)) %>% mutate(Metric=alphametric)
colnames(tmp.dat)[1] <- "Value"
tmp.dat
}
ob_url <- "~/Repos/nhguano/data/qiime_qza/alpha/alpha.vals_ob.qza"
sh_url <- "~/Repos/nhguano/data/qiime_qza/alpha/alpha.vals_sh.qza"
fp_url <- "~/Repos/nhguano/data/qiime_qza/alpha/alpha.vals_fp.qza"
ob_dat <- alphaimport(ob_url, "observed")
sh_dat <- alphaimport(sh_url, "shannon")
fp_dat <- alphaimport(fp_url, "faithpd")
alpha_dat <- rbind(ob_dat, sh_dat, fp_dat)
rm(ob_url, fp_url, sh_url, ob_dat, sh_dat, fp_dat)
metadata <- as.data.frame(read_csv(file="https://github.com/devonorourke/nhguano/raw/master/data/metadata/nhbat_meta.csv"))
tmp_alphadat <- merge(alpha_dat, metadata) %>% select(-SampleType, -Date) ## selects just those samples present in alpha calculations (i.e. the samples that were rarefied)
tmp_alphadat <- tmp_alphadat %>% mutate(Year=ifelse(StudyID=="oro15", "2015", "2016"))
metadata <- metadata %>% filter(SampleID %in% tmp_alphadat$SampleID)
## focusing on 2016 samples at these sites:
study1list <- c("MAP", "FOX", "BRN", "HOP", "HOL", "CNB", "CNA", "PEN", "MTV")
## update metadata to include just these Sites,
study1meta <- metadata %>% filter(Site %in% study1list & StudyID == "oro16")
## now and add in Window information
tmp_metamrg <- read_dat %>%
filter(SampleID %in% study1meta$SampleID) %>%
select(SampleID, Window, WindowStart) %>%
distinct()
study1meta <- merge(study1meta, tmp_metamrg)
rm(tmp_metamrg, tmp_alphadat, alpha_sumry)
## Collective summary of all samples (to determine which sites to keep for 2016, etc.)
alpha_sumry <- tmp_alphadat %>%
filter(Metric=="observed") %>%
group_by(Site, Year) %>%
summarise(Samples=n_distinct(SampleID))
metadata <- as.data.frame(read_csv(file="https://github.com/devonorourke/nhguano/raw/master/data/metadata/nhbat_meta.csv"))
tmp_alphadat <- merge(alpha_dat, metadata) %>% select(-SampleType, -Date) ## selects just those samples present in alpha calculations (i.e. the samples that were rarefied)
tmp_alphadat <- tmp_alphadat %>% mutate(Year=ifelse(StudyID=="oro15", "2015", "2016"))
metadata <- metadata %>% filter(SampleID %in% tmp_alphadat$SampleID)
## Collective summary of all samples (to determine which sites to keep for 2016, etc.)
alpha_sumry <- tmp_alphadat %>%
filter(Metric=="observed") %>%
group_by(Site, Year) %>%
summarise(Samples=n_distinct(SampleID))
study1list <- c("MAP", "FOX", "BRN", "HOP", "HOL", "CNB", "CNA", "PEN", "MTV")
## update metadata to include just these Sites,
study1meta <- metadata %>% filter(Site %in% study1list & StudyID == "oro16")
## now and add in Window information
tmp_metamrg <- read_dat %>%
filter(SampleID %in% study1meta$SampleID) %>%
select(SampleID, Window, WindowStart) %>%
distinct()
study1meta <- merge(study1meta, tmp_metamrg)
rm(tmp_metamrg, tmp_alphadat, alpha_sumry)
study1_WOY_sumry <- read_dat %>%
filter(SampleID %in% study1meta$SampleID) %>%
group_by(Site, WOY) %>%
summarise(Samples = n_distinct(SampleID))
study1_Window_sumry <- read_dat %>%
filter(SampleID %in% study1meta$SampleID) %>%
group_by(Site, Window) %>%
summarise(Samples = n_distinct(SampleID))
rm(metadata, p1_win, p1_win_f, p1_woy, p1_woy_f,
study1_win_sumry_filt, study1_Window_sumry, study1_WOY_sumry, study1_WOY_sumry_filt,
filt10_samples, filt2_samples, filt5_samples, SiteWindowKeep, alphaimport)
## static boxplot for each Site+Time window for selected 2016 sites
## order by geographic proximity (relatively anyway)
alpha_study1dat$Site <- factor(alpha_study1dat$Site, levels = c(
"HOL", "FOX", "HOP", "PEN", "CNA", "CNB", "MTV", "MAP", "BRN"))
## merge updated metadata (including Window) with alpha data
alpha_study1dat <- merge(study1meta, alpha_dat)
## set our categorical data for ANOVA as factors
alpha_study1dat$aovWindow <- as.factor(alpha_study1dat$Window)
alpha_study1dat$aovSite <- as.factor(alpha_study1dat$Site)
## static boxplot for each Site+Time window for selected 2016 sites
## order by geographic proximity (relatively anyway)
alpha_study1dat$Site <- factor(alpha_study1dat$Site, levels = c(
"HOL", "FOX", "HOP", "PEN", "CNA", "CNB", "MTV", "MAP", "BRN"))
## plot boxplot; save as 'alpha_ob_boxplotPerWindowPerSite_select2016'; export at 500x1000
ggplot(data=alpha_study1dat %>% filter(Metric=="observed"),
aes(x=Window, y=Value, group=Window), fill="gray50") +
geom_boxplot(outlier.shape = NA) +
geom_jitter(alpha=0.4, width = 0.15) +
facet_grid(Site ~ .) +
scale_x_continuous(breaks=c(7,10,13,16,19,22),
labels=c('2016-03-26', '2016-05-07', '2016-06-18', '2016-07-30', '2016-09-10', '2016-10-22')) +
#scale_y_continuous(trans="log2", labels = comma_format(accuracy = 1)) +
labs(x="", y="Observed richness") +
theme_bw(base_size = 16) +
theme(legend.position = "none", axis.text.x = element_text(angle=45, hjust=1))
barplot_study1_plotdat <- read_dat %>%
filter(SampleID %in% alpha_study1dat_names$`#OTU ID`) %>%
group_by(Site, Window, WindowStart, Order) %>%
summarise(Reads=sum(Reads)) %>%
mutate(pReads = Reads/sum(Reads))
## collect just these names for future use in data filtering (in other scripts):
alpha_study1dat_names <- alpha_study1dat %>% select(SampleID) %>% unique()
colnames(alpha_study1dat_names) <- "#OTU ID"
barplot_study1_plotdat <- read_dat %>%
filter(SampleID %in% alpha_study1dat_names$`#OTU ID`) %>%
group_by(Site, Window, WindowStart, Order) %>%
summarise(Reads=sum(Reads)) %>%
mutate(pReads = Reads/sum(Reads))
## 12 color palette for the unique Orders here
pal12 <- c('#fffe71', '#CE9834', '#9A6600', '#9BCC94', '#405E00', '#993303',
'#FF6501', '#336799', '#9ACEFF', 'gray75', '#D14A89', 'gray25')
## rearrange the levels for the facet wrap here to match previous ordering by Site
barplot_study1_plotdat$Site <- factor(barplot_study1_plotdat$Site, levels = c(
"HOL", "FOX", "HOP", "PEN", "CNA", "CNB", "MTV", "MAP", "BRN"))
## plot is faceting Sites, showing each Window as separate stacked bars of Order relative abundances
## plot barplot; save as 'Order_relAbund_stackedBars_select2016'; export at 800x800
ggplot(data = barplot_study1_plotdat,
aes(x=Window, y=pReads, group=Window, fill=Order)) +
geom_bar(stat="identity") +
scale_fill_manual(values=pal12) +
scale_x_continuous(breaks=c(7,10,13,16,19,22),
labels=c('2016-03-26', '2016-05-07', '2016-06-18', '2016-07-30', '2016-09-10', '2016-10-22')) +
scale_y_continuous(breaks = c(0,.5, 1)) +
facet_grid(Site ~ .) +
labs(x="", y="Relative Abundance (%)", fill="Order") +
theme_bw(base_size = 16) +
theme(axis.text.x = element_text(angle=45, hjust=1))
dc.dist_url <- "~/Repos/nhguano/data/qiime_qza/distmat/select2016/deicode_distmat.qza"
## import distance values from QIIME for Adonis:
## import diversity files
adonisfunction <- function(urlpath, betametric){
tmp.qza <- read_qza(urlpath)
tmp.dist <- tmp.qza$data
tmp.adonis <- adonis(formula = tmp.dist ~ Site * Window, data = study1meta)
tmp.adonis_data <- tmp.adonis$aov.tab
tmp.adonis_data %>%
mutate(Terms=row.names(.), Metric=betametric) %>%
select(Terms, Df, SumsOfSqs, MeanSqs, F.Model, R2, `Pr(>F)`, Metric)
}
dc_adonis_df <- adonisfunction(wu.dist_url, "dc")
dc_adonis_df <- adonisfunction(dc.dist_url, "dc")
dc_min10.dist_url <- "~/Repos/nhguano/data/qiime_qza/distmat/select2016/deicode_distmat_min10feat.qza"
dcmin10_adonis_df <- adonisfunction(dc_min10.dist_url, "dc_min10")
View(dc_adonis_df)
View(barplot_study1_plotdat)
write_csv(dc_adonis_df, path = "~/Repos/nhguano/data/stats/beta/dc_adonis_select2016.csv", quote=FALSE)
write_csv(dcmin10_adonis_df, path = "~/Repos/nhguano/data/stats/beta/dc_min10_adonis_select2016.csv", quote=FALSE)
View(dcmin10_adonis_df)
rm(ds.dist_url, bc.dist_url, uu.dist_url, wu.dist_url, dc.dist_url, dc_min10.dist_url,
ds_adonis_df, bc_adonis_df, uu_adonis_df, wu_adonis_df, dc_adonis_df, dcmin10_adonis_df)
## import PCoA files for plotting
ds.pcoa_url <- "~/Repos/nhguano/data/qiime_qza/pcoa/select2016/s16_pcoa_ds.qza"
bc.pcoa_url <- "~/Repos/nhguano/data/qiime_qza/pcoa/select2016/s16_pcoa_bc.qza"
uu.pcoa_url <- "~/Repos/nhguano/data/qiime_qza/pcoa/select2016/s16_pcoa_uu.qza"
wu.pcoa_url <- "~/Repos/nhguano/data/qiime_qza/pcoa/select2016/s16_pcoa_wu.qza"
pcoaplotfunction <- function(urlpath, betametric){
tmp.qza <- read_qza(urlpath)
tmp.data <- tmp.qza$data$Vectors[,1:3]
tmp.lab.pc1 <- tmp.qza$data$ProportionExplained[1] %>% mutate(PC1=PC1*100) %>% pull() %>% round(., 2) %>% paste("PC1", ., sep = " ") %>% paste0(., "%")
tmp.lab.pc2 <- tmp.qza$data$ProportionExplained[2] %>% mutate(PC2=PC2*100) %>% pull() %>% round(., 2) %>% paste("PC2", ., sep = " ") %>% paste0(., "%")
data.frame(tmp.data, tmp.lab.pc1, tmp.lab.pc2, betametric)
}
ds_pcoa_df <- pcoaplotfunction(ds.pcoa_url, "ds")
bc_pcoa_df <- pcoaplotfunction(bc.pcoa_url, "bc")
uu_pcoa_df <- pcoaplotfunction(uu.pcoa_url, "uu")
wu_pcoa_df <- pcoaplotfunction(wu.pcoa_url, "wu")
## plot separately to include each unique x/y axis PC % variance label, then pull together in single plot
pcoaplotvizfunction <- function(data, CaptionName){
tmp_df <- merge(data, study1meta)
pc1lab <- tmp_df %>% distinct(tmp.lab.pc1)
pc1lab <- as.character(pc1lab$tmp.lab.pc1)
pc2lab <- tmp_df %>% distinct(tmp.lab.pc2)
pc2lab <- as.character(pc2lab$tmp.lab.pc2)
ggplot(data = tmp_df, aes(x=PC1, y=PC2, label=Site, color=Window)) +
geom_text() +
scale_x_continuous(limits = c(-.63,.63)) +
scale_y_continuous(limits = c(-.63,.63)) +
scale_color_distiller(palette = "Spectral") +
labs(x=pc1lab, y=pc2lab, subtitle = CaptionName) +
theme(legend.position = "top") +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"))
}
## gather individual plots
ds_pcoa_plot <- pcoaplotvizfunction(ds_pcoa_df, "Dice-Sorensen")
ds_pcoa_plot
## plot separately to include each unique x/y axis PC % variance label, then pull together in single plot
pcoaplotvizfunction <- function(data, CaptionName){
tmp_df <- merge(data, study1meta)
pc1lab <- tmp_df %>% distinct(tmp.lab.pc1)
pc1lab <- as.character(pc1lab$tmp.lab.pc1)
pc2lab <- tmp_df %>% distinct(tmp.lab.pc2)
pc2lab <- as.character(pc2lab$tmp.lab.pc2)
ggplot(data = tmp_df, aes(x=PC1, y=PC2, label=Site, color=Window)) +
geom_text() +
scale_x_continuous(limits = c(-.63,.63)) +
scale_y_continuous(limits = c(-.63,.63)) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
labs(x=pc1lab, y=pc2lab, subtitle = CaptionName) +
theme(legend.position = "top") +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.key.width = unit(3.5, "cm"))
}
## gather individual plots
ds_pcoa_plot <- pcoaplotvizfunction(ds_pcoa_df, "Dice-Sorensen")
ds_pcoa_plot
bc_pcoa_plot <- pcoaplotvizfunction(bc_pcoa_df, "Bray-Curtis")
uu_pcoa_plot <- pcoaplotvizfunction(uu_pcoa_df, "unweighted Unifrac")
wu_pcoa_plot <- pcoaplotvizfunction(wu_pcoa_df, "weighted Unifrac")
## plot as one big set; save as 'pcoa_select2016_all4'; export at 900x900
ggarrange(ds_pcoa_plot, bc_pcoa_plot, uu_pcoa_plot, wu_pcoa_plot,
ncol=2, nrow=2, common.legend = TRUE)
## plot separately to include each unique x/y axis PC % variance label, then pull together in single plot
pcoaplotvizfunction <- function(data, CaptionName){
tmp_df <- merge(data, study1meta)
pc1lab <- tmp_df %>% distinct(tmp.lab.pc1)
pc1lab <- as.character(pc1lab$tmp.lab.pc1)
pc2lab <- tmp_df %>% distinct(tmp.lab.pc2)
pc2lab <- as.character(pc2lab$tmp.lab.pc2)
ggplot(data = tmp_df, aes(x=PC1, y=PC2, label=Site, color=Window)) +
geom_text(size = 2) +
scale_x_continuous(limits = c(-.63,.63)) +
scale_y_continuous(limits = c(-.63,.63)) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
labs(x=pc1lab, y=pc2lab, subtitle = CaptionName) +
theme(legend.position = "top") +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.key.width = unit(3.5, "cm"))
}
## gather individual plots
ds_pcoa_plot <- pcoaplotvizfunction(ds_pcoa_df, "Dice-Sorensen")
bc_pcoa_plot <- pcoaplotvizfunction(bc_pcoa_df, "Bray-Curtis")
uu_pcoa_plot <- pcoaplotvizfunction(uu_pcoa_df, "unweighted Unifrac")
wu_pcoa_plot <- pcoaplotvizfunction(wu_pcoa_df, "weighted Unifrac")
## plot as one big set; save as 'pcoa_select2016_all4'; export at 900x900
ggarrange(ds_pcoa_plot, bc_pcoa_plot, uu_pcoa_plot, wu_pcoa_plot,
ncol=2, nrow=2, common.legend = TRUE)
## plot separately to include each unique x/y axis PC % variance label, then pull together in single plot
pcoaplotvizfunction <- function(data, CaptionName){
tmp_df <- merge(data, study1meta)
pc1lab <- tmp_df %>% distinct(tmp.lab.pc1)
pc1lab <- as.character(pc1lab$tmp.lab.pc1)
pc2lab <- tmp_df %>% distinct(tmp.lab.pc2)
pc2lab <- as.character(pc2lab$tmp.lab.pc2)
ggplot(data = tmp_df, aes(x=PC1, y=PC2, label=Site, color=Window)) +
geom_text(size = 1.5) +
scale_x_continuous(limits = c(-.63,.63)) +
scale_y_continuous(limits = c(-.63,.63)) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
labs(x=pc1lab, y=pc2lab, subtitle = CaptionName) +
theme(legend.position = "top") +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.key.width = unit(3.5, "cm"))
}
## gather individual plots
ds_pcoa_plot <- pcoaplotvizfunction(ds_pcoa_df, "Dice-Sorensen")
bc_pcoa_plot <- pcoaplotvizfunction(bc_pcoa_df, "Bray-Curtis")
uu_pcoa_plot <- pcoaplotvizfunction(uu_pcoa_df, "unweighted Unifrac")
wu_pcoa_plot <- pcoaplotvizfunction(wu_pcoa_df, "weighted Unifrac")
## plot as one big set; save as 'pcoa_select2016_all4'; export at 900x900
ggarrange(ds_pcoa_plot, bc_pcoa_plot, uu_pcoa_plot, wu_pcoa_plot,
ncol=2, nrow=2, common.legend = TRUE)
## plot separately to include each unique x/y axis PC % variance label, then pull together in single plot
pcoaplotvizfunction <- function(data, CaptionName){
tmp_df <- merge(data, study1meta)
pc1lab <- tmp_df %>% distinct(tmp.lab.pc1)
pc1lab <- as.character(pc1lab$tmp.lab.pc1)
pc2lab <- tmp_df %>% distinct(tmp.lab.pc2)
pc2lab <- as.character(pc2lab$tmp.lab.pc2)
ggplot(data = tmp_df, aes(x=PC1, y=PC2, label=Site, color=Window)) +
geom_text(size = 1.8) +
scale_x_continuous(limits = c(-.63,.63)) +
scale_y_continuous(limits = c(-.63,.63)) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
labs(x=pc1lab, y=pc2lab, subtitle = CaptionName) +
theme(legend.position = "top") +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.key.width = unit(3.5, "cm"))
}
ds_pcoa_plot <- pcoaplotvizfunction(ds_pcoa_df, "Dice-Sorensen")
bc_pcoa_plot <- pcoaplotvizfunction(bc_pcoa_df, "Bray-Curtis")
uu_pcoa_plot <- pcoaplotvizfunction(uu_pcoa_df, "unweighted Unifrac")
wu_pcoa_plot <- pcoaplotvizfunction(wu_pcoa_df, "weighted Unifrac")
## plot as one big set; save as 'pcoa_select2016_all4'; export at 900x900
ggarrange(ds_pcoa_plot, bc_pcoa_plot, uu_pcoa_plot, wu_pcoa_plot,
ncol=2, nrow=2, common.legend = TRUE)
ggplot(data = tmp_df, aes(x=PC1, y=PC2, label=Site, color=Window)) +
geom_text(size = 2.5) +
scale_x_continuous(limits = c(-.63,.63)) +
scale_y_continuous(limits = c(-.63,.63)) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
labs(x=pc1lab, y=pc2lab, subtitle = CaptionName) +
theme(legend.position = "top") +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.key.width = unit(3.5, "cm"))
## plot separately to include each unique x/y axis PC % variance label, then pull together in single plot
pcoaplotvizfunction <- function(data, CaptionName){
tmp_df <- merge(data, study1meta)
pc1lab <- tmp_df %>% distinct(tmp.lab.pc1)
pc1lab <- as.character(pc1lab$tmp.lab.pc1)
pc2lab <- tmp_df %>% distinct(tmp.lab.pc2)
pc2lab <- as.character(pc2lab$tmp.lab.pc2)
ggplot(data = tmp_df, aes(x=PC1, y=PC2, label=Site, color=Window)) +
geom_text(size = 2.5) +
scale_x_continuous(limits = c(-.63,.63)) +
scale_y_continuous(limits = c(-.63,.63)) +
scale_color_distiller(palette = "Spectral",
name = "Sampling Window",
breaks = c(7, 10, 13, 16, 19, 22),
labels = c("Apr-7", "May-20", "June-18", "July-30", "Sept-10", "Oct-22")) +
labs(x=pc1lab, y=pc2lab, subtitle = CaptionName) +
theme(legend.position = "top") +
theme(panel.background = element_rect(fill = "gray40"),
plot.background = element_rect(fill = "gray95"),
legend.key.width = unit(3.5, "cm"))
}
ds_pcoa_plot <- pcoaplotvizfunction(ds_pcoa_df, "Dice-Sorensen")
bc_pcoa_plot <- pcoaplotvizfunction(bc_pcoa_df, "Bray-Curtis")
uu_pcoa_plot <- pcoaplotvizfunction(uu_pcoa_df, "unweighted Unifrac")
wu_pcoa_plot <- pcoaplotvizfunction(wu_pcoa_df, "weighted Unifrac")
## plot as one big set; save as 'pcoa_select2016_all4'; export at 900x900
ggarrange(ds_pcoa_plot, bc_pcoa_plot, uu_pcoa_plot, wu_pcoa_plot,
ncol=2, nrow=2, common.legend = TRUE)
## plot each separately too; export each at 900x900
## save as 'pcoa_ds_select2016'
ds_pcoa_plot
## save as 'pcoa_bc_select2016'
bc_pcoa_plot
## save as 'pcoa_uu_select2016'
uu_pcoa_plot
## save as 'pcoa_wu_select2016'
wu_pcoa_plot
rm(list=ls(pattern="_pcoa_*"))
rm(list=ls(pattern="*_url"))
rm(list=ls(pattern="*lab*"))
## import read data (importing just the read-filtered, min-sample data)
read_dat = read_csv("https://github.com/devonorourke/nhguano/raw/master/data/filtered_dataset_wWindows_min1000Reads_min2SamplesperSiteWindow.csv")
View(read_dat)
read_dat %>% filter(Species == "Hexagenia limbata") %>% group_by(Labeler) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(Reads))
read_dat %>% filter(Genus=="Chironomus") %>% group_by(Site) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(Reads))
read_dat %>% filter(ASVid=="ASV-20") %>% group_by(Site) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(Reads))
read_dat %>% filter(ASValias=="ASV-20") %>% group_by(Site) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(Reads))
read_dat %>% filter(Family=="Chironomidae" & ASValias != "ASV-20") %>% group_by(Site) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(Reads))
read_dat %>% filter(Species=="Phyllophaga anxia") %>% group_by(Labeler) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(
Reads))
read_dat %>% filter(Species=="Phyllophaga anxia") %>% group_by(Site) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(
Reads))
read_dat %>% filter(Genus=="Phyllophaga") %>% group_by(Site) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(
Reads))
read_dat %>% filter(ASValias=="ASV-2") %>% group_by(Site) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(
Reads))
read_dat %>% filter(Genus == Phyllophaga) %>% distinct(Species)
read_dat %>% filter(Genus == "Phyllophaga") %>% distinct(Species)
read_dat %>% filter(Genus == "Phyllophaga") %>% distinct(Species) %>% arrange(Species)
read_dat %>% filter(Genus == "Phyllophaga") %>% group_by(Species) %>% summarise(Samples=n_distinct(SampleID), Reads=sum(Reads))
read_dat %>% filter(Species == "Maladera castanea") %>% summarise(Samples=n_distinct(SampleID), Reads=sum(Reads))
